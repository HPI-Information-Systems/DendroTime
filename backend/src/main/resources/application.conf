dendrotime {
    # network configuration
    host = localhost
    port = 8080

    # Path to the data directory
    # Existing datasets are automatically added to the index. New datasets are also stored in this directory, when
    # uploaded using the web frontend.
    data-path = data/datasets

    # Path to the ground-truth directory
    # DendroTime uses the ground-truth data to evaluate the quality of the clustering results. Ground-truth data
    # includes the true cluster assignments as well as the final hierarchy. The ground-truth directory should
    # contain one subdirectory for each dataset with the different hierarchies (for distance and linkage methods)
    # and the true cluster assignments.
    ground-truth-path = data/ground-truth

    # Path to the results directory
    # The results directory contains the clustering results for each dataset. The results are stored in the
    # same format as the ground-truth data.
    results-path = data/results

    # Limit the number of time series that are loaded from each dataset. Just for debugging and scaling experiments.
#     max-timeseries = 5

    ask-timeout = 5s

    max-workers = 4

    reporting-interval = 30s

    bloom-filter {
        # Number of bits used in the calculation of the MurmurHash3 hash functions for the bloom filter. You can
        # chose between 64bit and 128bit.
        murmurhash-size = 64
        # Controls the size of the bloom filter used to compare hierarchies. Lower values increase memory usage but
        # reduce the false positive rate.
        false-positive-rate = 0.01
    }

    cluster-similarity {
        # Method for the computation of the similarity between two hierarchies. You can choose between:
        # - set-jaccard: Jaccard similarity of the sets of nodes in the two hierarchies. Each node is
        #   identified by its members using a bloom filter.
        # - level-jaccard: Jaccard similarity between the nodes at the same position in the two hierarchies.
        #   The level-wise similarities are then aggregated using the specified aggregation method.
        # - level-equality: Equality of the nodes at the same position in the two hierarchies. Again, the
        #   level-wise similarities are aggregated using the specified aggregation method.
        similarity = set-jaccard
        # Aggregation method for level-wise similarities: Simple "average", logarithmic "size-weighted" (using
        # the new cardinalities), "decaying" (using the node position/index and a decaying factor).
        aggregation = size-weighted
        # Decaying factor for the decaying aggregation method. The higher the factor, the more weight is given to
        # the nodes lower in the hierarchy.
        decaying-factor = 0.1
        # Limit the similarity comparison to clusters/nodes with at least this number of members.
        # Set to 0 to disable.
        cardinality-lower-bound = 3
        # Limit the similarity comparison to clusters/nodes with at most N - this number of members.
        # Set to 0 to disable. 1 ignores the root node that includes all members (highly recommended).
        cardinality-upper-bound = 1
    }
 
    progress-indicators {
        # The hierarchy similarity indicator computes the similarity between the current and the previous hierarchy
        # for every clustering step. It can be computed without any ground-truth data.
        hierarchy-similarity = true
        # The cluster quality indicator computes the adjusted_rand_score for the current hierarchy. It requires
        # ground-truth class labels for each time series in the dataset.
        cluster-quality = true
        # The hierarchy quality indicator computes the similarity between the current hierarchy and the final
        # exact hierarchy. This requires a ground-truth hierarchy (the final hierarchy) for each dataset.
        hierarchy-quality = true
    }
}

akka {
    loglevel = WARNING

    http {
        server {
            enable-http2 = true

            # The maximum number of concurrently accepted connections when binding a server using
            # `Http().newServerAt().bindXYZ()` methods.
            #
            # This setting doesn't apply to the `Http().bind` method which will still
            # deliver an unlimited backpressured stream of incoming connections.
            #
            # Note, that this setting limits the number of the connections on a best-effort basis.
            # It does *not* strictly guarantee that the number of established TCP connections will never
            # exceed the limit (but it will be approximately correct) because connection termination happens
            # asynchronously. It also does *not* guarantee that the number of concurrently active handler
            # flow materializations will never exceed the limit for the reason that it is impossible to reliably
            # detect when a materialization has ended.
            max-connections = 1024

            # Enables/disables the addition of a `Raw-Request-URI` header holding the
            # original raw request URI as the client has sent it.
            raw-request-uri-header = off
        }
    }
}
