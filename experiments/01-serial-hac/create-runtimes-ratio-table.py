#!/usr/bin/env python3
import sys

from pathlib import Path
from tqdm import tqdm

import pandas as pd

RESULT_FOLDER = Path("results")
OUTPUT_FILENAME = "runtimes-ratio-table.tex"

template = """% DO NOT MODIFY!
% This file is automatically generated by executing experiment 01-serial-hac
\\begin{{tabular}}{{lr}}
\\toprule
Dissimilarity Measure & Runtime Ratio \\\\
\\midrule
{content}
\\bottomrule
\\end{{tabular}}
"""
distance_name_mapping = {
    "euclidean": "Euclidean",
    "dtw": "\\gls{dtw}",
    "msm": "\\gls{msm}",
    "sbd": "\\gls{sbd}",
}


def main():
    print("Creating runtime ratio table ...", file=sys.stderr)
    filepath = RESULT_FOLDER / "aggregated-runtimes.csv"
    print(f"  reading runtimes from {filepath} experiments ...", file=sys.stderr)
    df = pd.read_csv(filepath)
    df = df[df["strategy"] == "approx_distance_ascending"]
    df = df.pivot(index=["dataset", "distance", "linkage", "strategy"], columns=["phase"], values="runtime")
    df["distance_ratio"] = df["ComputingFullDistances"] / df["Finished"]
    df = df.reset_index()

    print("  aggregating runtimes over datasets and linkages", file=sys.stderr)
    df = df.groupby(["distance", "strategy"]).agg({"distance_ratio": ["mean", "std"]})

    lines = []
    for (distance, _), row in df.iterrows():
        mean = row[("distance_ratio", "mean")] * 100
        std = row[("distance_ratio", "std")] * 100
        entry = f"    {distance_name_mapping[distance]} & ${mean:04.1f} \\pm {std:04.1f} \\%$ \\\\"
        lines.append(entry)
    content = "\n".join(lines)

    print(f"  writing latex table to {OUTPUT_FILENAME} ...", file=sys.stderr)
    with open(OUTPUT_FILENAME, "w") as f:
        f.write(template.format(content=content))
    print("... done.", file=sys.stderr)


if __name__ == "__main__":
    main()
